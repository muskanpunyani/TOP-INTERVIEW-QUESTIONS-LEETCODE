Given an array of non-negative integers nums, you are initially positioned at the first index of the array.

Each element in the array represents your maximum jump length at that position.

Determine if you are able to reach the last index.

 

Example 1:

Input: nums = [2,3,1,1,4]
Output: true
Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.

Example 2:

Input: nums = [3,2,1,0,4]
Output: false
Explanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.

 

Constraints:

    1 <= nums.length <= 3 * 104
    0 <= nums[i] <= 105


**************************************
class Solution {
public:
    /*
    We call a position in the array a "good index" if starting at that position, we can reach the last index. Otherwise, that index is called a "bad index". The problem then reduces to whether or not index 0 is a "good index
    */
    //0(n)
    bool canJump(vector<int>& nums) {
        int lastgoodindexposition=nums.size()-1; //the last good index is last index
        for(int i=nums.size()-1;i>=0;i--)
        {
            if(nums[i]+i >=lastgoodindexposition)
            {
                lastgoodindexposition=i;
            }
        }
        if(lastgoodindexposition==0)
            return true;
        return false;
    }
};
