Given an integer array nums, return all possible subsets (the power set).

The solution set must not contain duplicate subsets.

 

Example 1:

Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]

Example 2:

Input: nums = [0]
Output: [[],[0]]

 

Constraints:

    1 <= nums.length <= 10
    -10 <= nums[i] <= 10
    All the numbers of nums are unique
*****************************************
//0(n*2^n) time and space
class Solution {
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        vector<vector<int>> ans;
        int n=nums.size();  //no of elements
        int pow_no=pow(2,n);  //finding the number of all possible subsets (2^n)
        int counter,j;
        for(counter=0;counter<pow_no;counter++)  //binary loop from 000..0 till 111.1111
             {
            vector<int> v1;
            for(j=0;j<n;j++)
            {
                
                if(counter & (1<<j))
                   {
                      v1.push_back(nums[j]);
                   }
                   
            }
                   ans.push_back(v1);
            
        }
        return ans;
        /*
        [1,2,3]
        000 till 111
        2^3=8
        //1<<j=1*2^j
        000  - []
        001  -[1]
        010  -[2]
        011  -[1,2]
        100  -[3]
        101  -[3,1]
        110  -[2,3]
        111  -[1,2,3]
        
        
        */
        
        
    }
};
