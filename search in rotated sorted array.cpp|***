You are given an integer array nums sorted in ascending order (with distinct values), and an integer target.

Suppose that nums is rotated at some pivot unknown to you beforehand (i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).

If target is found in the array return its index, otherwise, return -1.

 

Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4

Example 2:

Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1

Example 3:

Input: nums = [1], target = 0
Output: -1

 

Constraints:

    1 <= nums.length <= 5000
    -104 <= nums[i] <= 104
    All values of nums are unique.
    nums is guaranteed to be rotated at some pivot.
    -104 <= target <= 104


****************************************
class Solution {
public:
    int search(vector<int>& nums, int target) {
        int l=0;
        int r=nums.size()-1;
        while(l<=r)
        {
            int mid=(l+r)/2;
            if(target==nums[mid])
                return mid;
            if(nums[mid]>nums[r]) // if 2nd part is unsorted
            {
                // then first part (l-mid) will be sorted
                
                //check target lies in first part or not
                if(nums[l]<=target && nums[mid]>target)
                {
                    r=mid-1;
                }
                else{
                    l=mid+1;
                }
            }
            else if(nums[mid]<nums[l]) // if 1st part is unsorted
            {
                // then second part (mid-r) is sorted
                
                //check target lies in 2nd part or not
                if(nums[mid]<target && target<=nums[r])
                {
                    l=mid+1;
                }
                else{    // if doesnt lie then first part
                    r=mid-1;
                }
            }
            else{
                if(nums[mid]<target)
                {
                    l=mid+1;
                }
                else{
                    r=mid-1;
                }
            }
        }
        return -1;
    }
};
